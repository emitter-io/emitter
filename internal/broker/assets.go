// Code generated by vfsgen; DO NOT EDIT.

package broker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 7, 9, 43, 8, 141417647, time.UTC),
		},
		"/keygen.html": &vfsgen۰CompressedFileInfo{
			name:             "keygen.html",
			modTime:          time.Date(2019, 5, 8, 9, 3, 59, 15306726, time.UTC),
			uncompressedSize: 3127,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x97\x4d\x6f\xe3\x36\x13\xc7\xef\xfb\x29\xe6\xe1\x73\xe9\x1e\x6c\x05\x71\xd2\xe6\x45\x36\xb0\x48\x17\x3d\x24\x68\x83\x5d\x5f\x16\x45\x0f\x7c\x19\x59\x44\x28\x52\x3b\x1c\xc5\x16\x04\x7f\xf7\x42\x2f\x49\xe4\xa4\xf1\x36\x80\x83\xfa\x62\x91\xfc\xcf\xcc\xdf\x3f\x51\xd4\x38\xfd\xdf\xaf\x7f\x5c\x2d\xbf\xdd\x7e\x86\x9c\x0b\xb7\xf8\x90\x3e\x7c\xa1\x34\x8b\x0f\x00\x00\xa9\xb3\xfe\x0e\x08\xdd\x5c\x44\xae\x1d\xc6\x1c\x91\x05\xe4\x84\xd9\x5c\xe4\xcc\x65\xbc\x48\x92\x42\x6e\xb4\xf1\x53\x15\x02\x47\x26\x59\xb6\x03\x1d\x8a\xe4\x71\x22\x99\x4d\x67\xd3\xd3\x44\xc7\xf8\x34\x37\x2d\xac\x9f\xea\x18\x05\x68\x0a\x31\x06\xb2\x2b\xeb\xe7\x42\xfa\xe0\xeb\x22\x54\x51\x0c\x06\xba\xb2\xfd\x75\xfb\x29\x09\xa1\x01\x15\xc8\x20\x5d\x00\xf8\xe0\xf1\x12\x4a\x69\x8c\xf5\xab\x0b\x38\x2d\x37\x97\xa0\xa4\xbe\x5b\x51\xa8\xbc\x99\xe8\xe0\x02\x5d\x00\x93\xf4\xb1\x94\x84\x9e\xb7\x8f\x99\xa6\x91\xc9\xfa\x15\x34\x30\xa8\xfe\x6f\x66\xa7\x27\x47\x47\x97\x30\xd2\xf8\xaa\x50\x48\x23\xcd\x19\x9e\x9c\x48\xb3\xa3\x51\x21\x38\x94\x7e\x24\x3a\xfe\x45\xe2\xcf\xcf\x13\x39\x37\x52\xe8\xa3\xd9\xf9\xb1\xda\x51\xdc\x61\x3d\x4e\x71\x7e\x76\xa4\xce\x1f\x04\x69\x32\x60\x48\x93\xfe\xde\xa4\x2a\x98\x7a\x20\x64\xec\x3d\x68\x27\x63\x9c\x0b\x1d\x3c\x4b\xeb\x91\x04\x58\xd3\x0f\xd1\xb3\x78\xc2\x37\x16\x53\x58\x8f\x56\xba\xd5\x2c\x50\x01\x05\x72\x1e\xcc\x5c\x94\x21\xf2\x33\xc1\xcb\x7a\x6e\x52\x98\x49\xc8\xb2\x88\x3c\x39\x86\x61\x7c\xf6\x0f\x61\x5d\x68\x3e\x5b\x5c\x63\x0d\xbf\xa1\x47\x92\x6c\x83\x4f\x93\x7c\xf6\x8a\x76\x54\x66\x8d\xce\xbd\x96\x72\x24\x6b\xdd\x4f\xda\x3b\x5f\xbe\x22\xee\x02\x9c\x54\xe8\x20\x0b\x34\x17\x77\x58\xaf\xd0\x5f\x63\x2d\x16\x5f\x51\x13\x32\x5c\x63\x9d\x26\x9d\x62\x4f\x06\xeb\xcb\x8a\x81\xeb\x12\xe7\x82\x71\xc3\x62\xc7\x40\x0b\x9d\x82\x13\xe0\x65\x81\x5d\x0d\x01\xf7\xd2\x55\x38\x17\x4d\x33\xbd\xc6\x7a\xbb\x15\x40\xf8\xbd\xb2\x84\x66\x2e\x98\x2a\x14\x50\x3a\xa9\x31\x0f\xce\x20\xcd\xc5\x9f\x5f\x86\xd5\xbf\xe0\x5b\xa8\x08\x62\xef\xad\xcd\xf4\x0a\x84\xc4\xd8\xfb\x77\xe3\x73\x95\x4b\xef\xd1\x89\xc5\x52\xd2\x0a\x19\x86\xf1\x81\x39\xe9\xa1\xca\x88\xd5\x50\xe8\x2d\xbc\x96\x39\x02\xf7\x36\x87\x84\xc0\xa1\x05\x58\x11\xc2\xda\x72\x0e\x9c\xe3\x7f\x46\x72\xc9\x2d\x45\x5b\xe0\x64\x19\x26\x37\xf6\x1e\xdf\xc6\xb0\x3f\x8c\xf6\x52\x64\x7e\x24\xd8\x34\xd3\xe5\xf2\x66\xbb\xdd\x65\xf5\x7b\x7f\xa0\x85\xac\x85\x12\xbc\x89\x20\x33\x46\x82\x75\x6e\xf5\x23\x1c\x58\x5b\xe7\x00\x37\xa5\x25\xdc\x0b\xaa\xbd\x3a\x24\xac\xf6\x31\xac\xc8\x72\x0d\x9f\xb4\xc6\x18\x7f\xcc\x67\x7c\x18\xe5\xa8\xef\x54\xd8\x88\xc5\x90\x6c\x80\xd7\x93\x89\x95\x12\xd0\x34\x60\xe3\x55\xab\x43\x03\xd3\xaf\x95\x82\xed\x76\x80\xfb\x14\x0d\x9f\x9c\x0b\x6b\x48\xd5\x82\x50\x9a\x34\x51\x0b\xf8\x29\x56\x2a\x6a\xb2\x0a\x3f\x42\x46\xa1\xe8\x40\xe9\xdd\xe7\x60\xcf\xd6\x79\x9b\xd3\xf2\xa5\xd3\xdb\x1f\x39\x5d\x93\x65\xec\xad\x96\x95\x72\x36\xe6\x1f\xdb\x8d\xff\x9e\x36\x23\x07\xc2\x17\x48\xdb\xc9\xfd\x56\xbb\xb8\xce\x6a\x81\x31\xca\x15\x46\xb0\x7e\xd7\x2b\x0c\x9a\x03\x3b\x76\x41\x9a\xe7\x86\x6f\x82\x34\xfb\xfd\xb6\x51\xbb\x76\x9f\xef\x80\x77\xb2\x5b\x12\x46\xf4\xfa\x05\xe3\xdb\x61\x7e\xbf\xed\x87\xe8\xce\xfa\xf7\x0a\xa9\x6e\x9b\x9d\x83\x9b\xc4\x0d\xa3\x7f\x41\xf5\x73\x37\xbb\xdf\x60\x1f\x69\xfd\xaa\x73\x98\x05\x82\x92\xec\xbd\x64\x84\x58\xa9\xc9\x80\x36\xfe\x0b\xc3\xa3\xa5\x03\x9d\x45\xaa\x62\x0e\xbe\x6b\xa1\xfa\x83\x5b\x0c\xbf\x23\x56\xaa\xb0\x4f\xef\x31\xc5\x1e\x14\xfb\x89\xc1\x4c\x56\x8e\xc5\x62\x68\x6c\xb0\xef\x23\xfa\x34\x6f\x7f\xd1\xb4\x3d\xee\x53\xed\x2f\x18\xcb\xe0\x23\x8a\x45\xd3\x4c\x1f\x06\xdb\x6d\x9a\x94\x84\x6f\xca\x3d\x9e\xde\x6d\xfb\x92\x16\xcb\xa8\x49\x7c\x10\x0e\x17\x69\xd2\x77\x9b\x69\xd2\xff\x3f\xf8\x3b\x00\x00\xff\xff\xe2\xcd\x17\xd7\x37\x0c\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/keygen.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
